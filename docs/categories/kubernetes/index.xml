<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kubernetes on A4 tech note</title><link>https://aaaanwz.github.io/categories/kubernetes/</link><description>Recent content in kubernetes on A4 tech note</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright> @aaaanwz コンテンツを引用される際は当ブログのURLを併記してください</copyright><lastBuildDate>Mon, 01 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://aaaanwz.github.io/categories/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>ArgoCD GitOpsにおけるSecret管理</title><link>https://aaaanwz.github.io/post/2021/argocd-vault-plugin/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>https://aaaanwz.github.io/post/2021/argocd-vault-plugin/</guid><description>KubernetesでGitOps運用となると必ず話題になるのがSecretの管理です。 Sealed Secretsやkubesecなどの手元で暗号化す</description></item><item><title>Argo Workflowsの失敗時にデフォルトでSlackに通知する</title><link>https://aaaanwz.github.io/post/2021/argo-workflows-exit-handler/</link><pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate><guid>https://aaaanwz.github.io/post/2021/argo-workflows-exit-handler/</guid><description>Argo workflowsでは Default Workflow Spec を設定する事でワークフローに色々とパッチできる。 以下のようにexit-handlerをworkflowDefa</description></item><item><title>embulkをArgo workflowsで実行するTemplate</title><link>https://aaaanwz.github.io/post/2021/argo-workflows-embulk/</link><pubDate>Thu, 28 Oct 2021 00:00:00 +0000</pubDate><guid>https://aaaanwz.github.io/post/2021/argo-workflows-embulk/</guid><description>Argo Workflowsの公式ドキュメントが分かりづらかったので、試しにembulkを実行するテンプレートを作ってみました。 config.yml</description></item><item><title>kubectl logsに任意のログを表示する</title><link>https://aaaanwz.github.io/post/2021/kubectl-logs/</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate><guid>https://aaaanwz.github.io/post/2021/kubectl-logs/</guid><description>kubectl logsはPID1の標準出力を表示するため、直接書き込んでしまえばなんでも表示できる。 1 2 3 $ kubectl exec -it pod-xxx bash # echo &amp;#39;show as stdin&amp;#39; &amp;gt; /proc/1/fd/1 # echo &amp;#39;show as stderr&amp;#39; &amp;gt; /proc/1/fd/2 1 2 3</description></item><item><title>KubernetesのCronJobからJobを手動作成する</title><link>https://aaaanwz.github.io/post/2020/k8s-cron-rerun/</link><pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate><guid>https://aaaanwz.github.io/post/2020/k8s-cron-rerun/</guid><description>1 kubectl create job 作成するJob名 --from=cronjob/CronJob名 https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#-em-job-em-</description></item><item><title>mavenプロジェクト作成からCIOps構築まで</title><link>https://aaaanwz.github.io/post/2019/java-create-maven-project/</link><pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate><guid>https://aaaanwz.github.io/post/2019/java-create-maven-project/</guid><description>git branchに変更が加わった際、 JUnit test (with MySQL) docker build Kubernetes環境にデプロイ (CIOps) が行われるJavaプロジェクトを構築します。 本番運用ではA</description></item><item><title>Kubernetes Liveness ProbeでJavaプロセスを監視する</title><link>https://aaaanwz.github.io/post/2019/java-k8s-liveness-probe/</link><pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate><guid>https://aaaanwz.github.io/post/2019/java-k8s-liveness-probe/</guid><description>Javaプロセスを一定時間毎にチェックし、ハングしていればPodを再起動する仕組みの備忘録です。 Kubernetes LivenessProbeに関する詳細はこ</description></item></channel></rss>