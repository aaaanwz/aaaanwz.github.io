<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>AWS on A4 tech note</title>
    <link>https://aaaanwz.github.io/categories/aws/</link>
    <description>Recent content in AWS on A4 tech note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 02 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://aaaanwz.github.io/categories/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kinesis Data FirehoseからMongoDB Cloudにデータを流してみる</title>
      <link>https://aaaanwz.github.io/post/2022/firehose_mongo/</link>
      <pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://aaaanwz.github.io/post/2022/firehose_mongo/</guid>
      <description>Amazon Kinesis Data Firehose が MongoDB Cloud へのデータ配信のサポートを開始 したそうなので試してみましたが、色々と「ん？」と思う点があったので書き残します。
詳細は Using MongoDB Realm WebHooks with Amazon Kinesis Data Firehose を見るようにとあります。
MongoDB Atlas でClusterを作成 MongoDB Atlas、MongoDB Realmという単語が登場しますが、AtlasはDBaaSとしてのMongoDBそのもの、RealmはAtlasを操作するためのインターフェースとなるサービスのようです。
まずはAtlasでCluster, Database, Collectionを作成します。
 Get Started with Atlas  MongoDB Realm Functionsを実装 てっきりGUIポチポチで連携完了するものかとおもってましたが、FirehoseからのWebhookエンドポイントとなるサーバーレス関数を自前で実装する必要があります。
だったらKinesis Data Streams + Lambdaでよくね&amp;hellip;？
 MongoDB Realm Functions  リリースノートのリンク先のサンプルコードの冒頭はこんな感じ。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  exports = function(payload, response) { /* Using Buffer in Realm causes a severe performance hit this function is ~6 times faster */ const decodeBase64 = (s) =&amp;gt; { var e={},i,b=0,c,x,l=0,a,r=&amp;#39;&amp;#39;,w=String.</description>
    </item>
    
    <item>
      <title>Github ActionsでAWS Lambdaにデプロイする</title>
      <link>https://aaaanwz.github.io/post/2019/github-actions-lambda-deploy/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://aaaanwz.github.io/post/2019/github-actions-lambda-deploy/</guid>
      <description>GitHubでreleaseが作成された時、Lambdaにコードを反映させバージョンを更新するワークフローの単純な実装です
サンプルディレクトリ構成 1 2 3 4 5 6 7  some-lambda-function-repo ├── .github │ └── workflows │ └── lambda-cd.yml ├── README.md ├── bootstrap └── handler.sh   GitHubのSecretsに以下を設定  AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY  必要なPolicyに関しては割愛します
Github Actions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  name: Lambda Continuous Delivery on: push: tags: - &amp;#39;*&amp;#39; jobs: lambda-cd: runs-on: ubuntu-latest steps: - uses: actions/checkout@master - run: chmod u+x * - run: zip -r /tmp/some-lambda-function.</description>
    </item>
    
  </channel>
</rss>
